{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gamma Modding API This documentation is for Generations Version 1.4 Gamma Documentation 3.1 Older documentations can be found here Link Not Ready Yet! Getting Started What is gamma Gamma is the API that Generations uses to work. It is a tag based game-manager system. It runs on MonoBehaviour C#. This is for easy control of game managers directly, and for adding new things fast. Making our first mod Let's start with creating our first mod. We will be using Gamma3, if you are using a Steam version, this will already be configured for you. Open the Generations_Data folder in your Generations directory Create a new C# file. (.cs) Copy paste this template using System; using System.Collections; using UnityEngine; public class MOD_NAME : MonoBehaviour { //This function gets called for one frame void Start() { } //This function gets called every frame void Update() { } } Let's see if the mod initialises, in the Start() function, let's print a string to console. We have to find the console object. To do that we have to do Console con = GameObject.FindGameObjectWithTag(\"Console\"); Now we will use the Log() function of the console to print a string to console. con.Log(\"Hello World\"); When done, the start function should look like void Start() { Console con = GameObject.FindGameObjectWithTag(\"Console\"); con.Log(\"Hello World\"); } Now it's time to open Generations. Open the settings Tick the box that says \"Enable Mods\" Create or load a world In the console, we should now see the string Hello World printed out. With this info, you should be able to use the modding api with no problem. Main Game Managers In Generations, the entire game is controlled by game managers. From saving-loading to inventory. These are controllable, here are all the public game managers and their functions Post Processing Volume Tag : PostProcess Function : Controls post processing. Functions : None Inventory Tag : Inventory Function : Controls the inventory array Functions : GiveItem(string item_name, int amount) Function : Adds item to the first empty slot with the given amount Returns : Nothing Modifies : Item[] items RemoveItem(string item_name) Function : Removes item with given name if item exists Returns : Nothing Modifies : Item[] items GetIndex(string item_name) Function : Returns the index of the given name if it's in the inventory Returns : int index Modifies : Nothing GetAmount(string item_name) Function : Returns the amount of the object with given name Returns : int amount Modifies : Nothing SetAmount(string item_name, int amount) Function : Sets the item with the given name to the given amount Returns : Nothing Modifies : Item[] items AddAmount(string item_name, int amount) Function : Adds given amount to the item with the given name Returns : Nothing Modifies : Item[] items Values : None PlayerValues These are deprecated, use values from console instead. Tag : PLAYER_VAL Function : Has player values such as health and stamina Functions : None Values : Script 1 : Stamina float stamina : Current Stamina Value, Ranges between 0 and 1 float staminaDecrease Script 2 : HealthSystem float health : Players current health Console Tag : Console Function : Games console Functions : CheckCommand() Function : Processes text in the input field Returns : None Modifies : None Process(string toProcess) Function : Processes given string Returns : None Modifies: Text consoleText FirstPersonControlelr fps CharacterController characterController Stamina stamina HealthSystem health GameObject ppv (Post Process Volume) Inventory inv Log(string text) Function : Logs text to console Returns : None Modifies: Text consoleText Instantiating While developing your mod, you might need to instantiate primative objects or fbx files. To create a primitive, you can use the Unity primitive gameobjects var Object = GameObject.CreatePrimitive(PrimitiveType.Cube); To create a fbx file, it's a little more complicated, but it can be done like this. Object prefab = Resources.Load(\"prefabname\"); GameObject t = (GameObject) Instantiate(prefab, new Vector3(0, 0, 0), Quaternion.identity); Other If you are using a non-steam version, or a PBG version, some things might be changed. Here are a list of changes: None Unsure what Gamma version you have? You can check it with your Generations version: Generations Beta 0.5 : None Generations Beta 0.6 : None Generations Beta 0.7 : Gamma1 Beta Generations Beta 0.8 : Gamma1 Generations Beta 0.9 : Gamma1 Generations Beta 1.0 : Gamma2 Generations Beta 1.1 : None Generations Beta 1.2 : None Generations Beta 1.3 : Gamma3 Beta Generations Beta 1.4 : Gamma4","title":"Gamma Modding API"},{"location":"#gamma-modding-api","text":"This documentation is for Generations Version 1.4 Gamma Documentation 3.1 Older documentations can be found here Link Not Ready Yet!","title":"Gamma Modding API"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#what-is-gamma","text":"Gamma is the API that Generations uses to work. It is a tag based game-manager system. It runs on MonoBehaviour C#. This is for easy control of game managers directly, and for adding new things fast.","title":"What is gamma"},{"location":"#making-our-first-mod","text":"Let's start with creating our first mod. We will be using Gamma3, if you are using a Steam version, this will already be configured for you. Open the Generations_Data folder in your Generations directory Create a new C# file. (.cs) Copy paste this template using System; using System.Collections; using UnityEngine; public class MOD_NAME : MonoBehaviour { //This function gets called for one frame void Start() { } //This function gets called every frame void Update() { } } Let's see if the mod initialises, in the Start() function, let's print a string to console. We have to find the console object. To do that we have to do Console con = GameObject.FindGameObjectWithTag(\"Console\"); Now we will use the Log() function of the console to print a string to console. con.Log(\"Hello World\"); When done, the start function should look like void Start() { Console con = GameObject.FindGameObjectWithTag(\"Console\"); con.Log(\"Hello World\"); } Now it's time to open Generations. Open the settings Tick the box that says \"Enable Mods\" Create or load a world In the console, we should now see the string Hello World printed out. With this info, you should be able to use the modding api with no problem.","title":"Making our first mod"},{"location":"#main-game-managers","text":"In Generations, the entire game is controlled by game managers. From saving-loading to inventory. These are controllable, here are all the public game managers and their functions","title":"Main Game Managers"},{"location":"#post-processing-volume","text":"Tag : PostProcess Function : Controls post processing. Functions : None","title":"Post Processing Volume"},{"location":"#inventory","text":"Tag : Inventory Function : Controls the inventory array Functions : GiveItem(string item_name, int amount) Function : Adds item to the first empty slot with the given amount Returns : Nothing Modifies : Item[] items RemoveItem(string item_name) Function : Removes item with given name if item exists Returns : Nothing Modifies : Item[] items GetIndex(string item_name) Function : Returns the index of the given name if it's in the inventory Returns : int index Modifies : Nothing GetAmount(string item_name) Function : Returns the amount of the object with given name Returns : int amount Modifies : Nothing SetAmount(string item_name, int amount) Function : Sets the item with the given name to the given amount Returns : Nothing Modifies : Item[] items AddAmount(string item_name, int amount) Function : Adds given amount to the item with the given name Returns : Nothing Modifies : Item[] items Values : None","title":"Inventory"},{"location":"#playervalues","text":"These are deprecated, use values from console instead. Tag : PLAYER_VAL Function : Has player values such as health and stamina Functions : None Values : Script 1 : Stamina float stamina : Current Stamina Value, Ranges between 0 and 1 float staminaDecrease Script 2 : HealthSystem float health : Players current health","title":"PlayerValues"},{"location":"#console","text":"Tag : Console Function : Games console Functions : CheckCommand() Function : Processes text in the input field Returns : None Modifies : None Process(string toProcess) Function : Processes given string Returns : None Modifies: Text consoleText FirstPersonControlelr fps CharacterController characterController Stamina stamina HealthSystem health GameObject ppv (Post Process Volume) Inventory inv Log(string text) Function : Logs text to console Returns : None Modifies: Text consoleText","title":"Console"},{"location":"#instantiating","text":"While developing your mod, you might need to instantiate primative objects or fbx files. To create a primitive, you can use the Unity primitive gameobjects var Object = GameObject.CreatePrimitive(PrimitiveType.Cube); To create a fbx file, it's a little more complicated, but it can be done like this. Object prefab = Resources.Load(\"prefabname\"); GameObject t = (GameObject) Instantiate(prefab, new Vector3(0, 0, 0), Quaternion.identity);","title":"Instantiating"},{"location":"#other","text":"If you are using a non-steam version, or a PBG version, some things might be changed. Here are a list of changes: None Unsure what Gamma version you have? You can check it with your Generations version: Generations Beta 0.5 : None Generations Beta 0.6 : None Generations Beta 0.7 : Gamma1 Beta Generations Beta 0.8 : Gamma1 Generations Beta 0.9 : Gamma1 Generations Beta 1.0 : Gamma2 Generations Beta 1.1 : None Generations Beta 1.2 : None Generations Beta 1.3 : Gamma3 Beta Generations Beta 1.4 : Gamma4","title":"Other"}]}